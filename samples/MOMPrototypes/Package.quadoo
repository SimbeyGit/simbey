function FormatSifPackage (strPackage, strFiles, fTrim, nCanvas, strDataName, oData)
{
	var aPackage = JSONCreateArray();

	var oBuilder = JSONCreateObject();
	oBuilder.package = "buildsif";
	oBuilder.name = strPackage;
	oBuilder.files = JSONParse("[\"" + strFiles + "\"]");
	oBuilder.trim = fTrim;
	oBuilder.canvas = nCanvas;
	aPackage.Append(oBuilder);

	var oFrame = JSONCreateObject();
	oFrame.package = "json";
	oFrame.name = strDataName;
	oFrame.data = oData;
	aPackage.Append(oFrame);

	return aPackage;
}

function ReadPngSize (strPngPath, nOutWidth, nOutHeight)
{
	var oPng = Host.ReadBinaryFile(strPngPath);
	var oBytes = oPng.Lock();
	var cbImage = oBytes.Size;

	if(cbImage > 8 && oBytes[0] == 0x89 && oBytes[1] == 'P' && oBytes[2] == 'N' && oBytes[3] == 'G')
	{
		var i = 8, cbChunk;

		while(i + 12 < cbImage)
		{
			cbChunk = (oBytes[i] << 24) + (oBytes[i + 1] << 16) + (oBytes[i + 2] << 8) + oBytes[i + 3];
			if(oBytes[i + 4] == 'I' && oBytes[i + 5] == 'H' && oBytes[i + 6] == 'D' && oBytes[i + 7] == 'R')
			{
				if(cbChunk == 13 && i + 25 < cbImage)
				{
					nOutWidth = (oBytes[i + 8] << 24) + (oBytes[i + 9] << 16) + (oBytes[i + 10] << 8) + oBytes[i + 11];
					nOutHeight = (oBytes[i + 12] << 24) + (oBytes[i + 13] << 16) + (oBytes[i + 14] << 8) + oBytes[i + 15];
					return true;
				}
				break;
			}
			i += cbChunk + 12;
		}
	}

	return false;
}

function BuildTileSet (strWorld, strTileSet, oTileSet, fBuildSizes)
{
	var oData = JSONCreateObject();
	oData.world = strWorld;
	oData.tileSet = strTileSet;

	var aKeys = JSONCreateArray();
	oData.keys = aKeys;

	println("Tile Set: " + strTileSet);

	// Build an alphabetized list of tile images using a string map.
	var mapTiles = new map<string>;
	var oTiles = oTileSet.Find("*.png");
	do
	{
		if(oTiles.IsFile)
			mapTiles.Add(oTiles.Name, null);
	} while(oTiles.Next());

	// Iterate over the alphabetized map to build the key sets.
	while(0 < len(mapTiles))
	{
		var strTile = mapTiles.GetKey(0);
		var strKey = left(strTile, 8);

		var oKey = aKeys.FindObject("key", strKey);
		if(null == oKey)
		{
			oKey = JSONCreateObject();
			oKey.key = strKey;
			oKey.variants = JSONCreateArray();
			if(fBuildSizes)
				oKey.sizes = JSONCreateArray();
			aKeys.Append(oKey);
		}
		var aVariants = oKey.variants;
		int idxVariant;

		if(strTile[8] != '-' && strTile[8] != '.')
			idxVariant = lcase(strTile[8]) - 'a';
		if(idxVariant > len(aVariants))
			throw "Invalid variant index: " + idxVariant;

		var aFrames;
		if(idxVariant == len(aVariants))
		{
			aFrames = JSONCreateArray();
			aVariants.Append(aFrames);
		}
		else
			aFrames = aVariants[idxVariant];

		aFrames.Append(strTile);

		if(fBuildSizes)
		{
			var aSizes = oKey.sizes, nWidth, nHeight, aImage;
			if(!ReadPngSize(oTileSet.GetPathOf(strTile), ref nWidth, ref nHeight))
				throw "Unable to read image size from: " + strTile;

			if(idxVariant == len(aSizes))
			{
				aImage = JSONCreateArray();
				aSizes.Append(aImage);

				// Add the sizes to the image array
				aImage.Append(nWidth);
				aImage.Append(nHeight);
			}
			else
			{
				aImage = aSizes[idxVariant];
				if(nWidth != aImage[0] || nHeight != aImage[1])
					throw strTile + " has a different image size than the other frames!";
			}
		}

		mapTiles.Remove(strTile);
	}

	return FormatSifPackage("tiles.sif", "*.png", false, 32, "tiles.json", oData);
}

function WriteTileSet (strWorld, strTileSet, oTileSet)
{
	Host.WriteTextFile((string)BuildTileSet(strWorld, strTileSet, oTileSet, false), oTileSet.GetPathOf("package.json"));
}

function BuildTerrainAnimators (oTerrain)
{
	var oEnum = oTerrain.Find("*");
	do
	{
		if(oEnum.IsFolder)
		{
			var strWorld = oEnum.Name;
			var oFolder = oEnum.OpenFolder();
			var oTileSet = oFolder.Find("*");
			do
			{
				if(oTileSet.IsFolder)
					WriteTileSet(strWorld, oTileSet.Name, oTileSet.OpenFolder());
			} while(oTileSet.Next());
		}
	} while(oEnum.Next());
}

function BuildCombatTileSet (strWorld, strStyle, strTileSet, oTileSet)
{
	var aPackage = BuildTileSet(strWorld, strTileSet, oTileSet, true);
	var oData = aPackage[1];

	oData.style = strStyle;
	if(strTileSet == "feature")
	{
		aPackage[0].trim = true;

		var aKeys = oData.data.keys;
		for(int i = 0; i < len(aKeys); i++)
			set(aKeys[i], "auto-offset", true);
	}

	Host.WriteTextFile((string)aPackage, oTileSet.GetPathOf("package.json"));
}

function BuildCombatAnimators (oTerrain, strWorld)
{
	var oWorld = oTerrain.OpenFolder(strWorld);
	var oEnum = oWorld.Find("*");
	do
	{
		if(oEnum.IsFolder)
		{
			var strStyle = oEnum.Name;
			var oStyle = oEnum.OpenFolder();
			var oTileSet = oStyle.Find("*");
			do
			{
				if(oTileSet.IsFolder)
					BuildCombatTileSet(strWorld, strStyle, oTileSet.Name, oTileSet.OpenFolder());
			} while(oTileSet.Next());
		}
	} while(oEnum.Next());
}

function main ()
{
	var oScript;

	println("Compiling combat.quadoo...");
	if(Host.Compile(null, Host.ReadTextFile("Assets\\scripts\\combat.quadoo"), false, ref oScript))
	{
		Host.WriteBinaryFile(oScript, "Assets\\scripts\\combat.qbc");

		println("Building overland terrain animators...");
		BuildTerrainAnimators(Host.OpenFolder("Assets\\overland\\terrain"));

		println("Building combat terrain animators (Arcanus)...");
		BuildCombatAnimators(Host.OpenFolder("Assets\\combat\\terrain"), "Arcanus");

		println("Building combat terrain animators (Myrror)...");
		BuildCombatAnimators(Host.OpenFolder("Assets\\combat\\terrain"), "Myrror");

		var oPackager = Host.CreateProcess("..\\..\\target\\release\\SIFPackage.exe", "Assets Assets.pkg");
		oPackager.Wait();

		var nResult = oPackager.GetExitCode();
		if(0 == nResult)
		{
			var oCombatDemo = Host.OpenFolder("MOMCombatDemo");
			var oWorldEditor = Host.OpenFolder("MOMWorldEditor");

			println("Removing previous Assets.pkg files...");
			try oCombatDemo.DeleteFile("Assets.pkg"); catch;
			try oWorldEditor.DeleteFile("Assets.pkg"); catch;

			println("Hard linking Assets.pkg...");
			oCombatDemo.CopyHardLink("..\\Assets.pkg", oCombatDemo.GetPathOf("Assets.pkg"));
			oWorldEditor.CopyHardLink("..\\Assets.pkg", oWorldEditor.GetPathOf("Assets.pkg"));
		}
		else
		{
			println("Error building the package!");
			println("Error code: 0x" + hex(nResult));
		}
	}
	else
	{
		println("Error compiling combat.quadoo!");
		println(JSONFormat((string)oScript));
	}
}
