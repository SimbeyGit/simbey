#include <windows.h>
#include "Library\Core\CoreDefs.h"
#include "Keywords.h"

const KEYWORD c_rgKeywords[] =
{
	{ SLP(L"array"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"bool"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"break"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"case"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"catch"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"class"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"continue"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"default"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"delete"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"do"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"double"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"else"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"enum"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"extern"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"false"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"fiber"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"float"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"for"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"function"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"get"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"goto"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"if"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"int"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"interface"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"long"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"map"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"money"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"namespace"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"new"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"null"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"operator"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"partial"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"property"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"ref"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"return"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"set"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"static"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"string"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"super"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"switch"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"this"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"throw"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"true"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"try"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"var"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"virtual"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"void"), RGB(0, 0, 255), RGB(0, 162, 232) },
	{ SLP(L"while"), RGB(0, 0, 255), RGB(0, 162, 232) },

	{ SLP(L"len"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"sqrt"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"log"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"log10"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"exp"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"asc"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"chr"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"trim"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"substring"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strchr"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strrchr"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"hex"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"abs"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"lcase"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"ucase"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"instr"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"instri"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"instrrev"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"instrrevi"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"now"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"nowutc"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strcmpi"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"replace"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"timer"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"rand"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"srand"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"yield"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"split"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"space"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"sin"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"cos"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"tan"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"hyp"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"left"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"right"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"stringbuilder"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"gc"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"mutex"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"extract"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"extracti"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"eventsource"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"modf"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"sigmoid"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"sinh"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"cosh"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"tanh"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"rad"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"deg"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"event"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"wait"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"waitall"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"asin"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"acos"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"atan"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strcmp"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"scan"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"sleep"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"print"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"println"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"utoa"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"replacei"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"isempty"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"nsn"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"inf"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"ramp"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"newasync"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"async"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"await"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"propbag"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strcmpn"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strcmpni"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"base64"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"base64url"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strins"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strtok"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"reduce"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"dice"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"stringlist"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"join"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"round"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"ceil"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"floor"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"sum"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"splitlines"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"min"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"max"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"writer"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"reader"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"atou"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"input"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"linereader"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"fetch"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"mapfind"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strrcmp"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"strrcmpi"), RGB(255, 0, 0), RGB(232, 52, 36) },
	{ SLP(L"typeof"), RGB(255, 0, 0), RGB(232, 52, 36) },

	{ SLP(L"JSONParse"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONParseWithDictionary"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONParseBase64"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONParseBase64Url"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONCreateDictionary"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONGetObject"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONGetValue"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONSetValue"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONRemoveValue"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONCreateObject"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONCreateArray"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONMergeObject"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONAddFromObject"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONFindArrayString"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONClone"), RGB(64, 128, 192), RGB(120, 240, 70) },
	{ SLP(L"JSONFormat"), RGB(64, 128, 192), RGB(120, 240, 70) }
};

VOID GetKeywords (__deref_out_ecount(*pcKeywords) const KEYWORD** prgKeywords, __out INT* pcKeywords)
{
	*prgKeywords = c_rgKeywords;
	*pcKeywords = ARRAYSIZE(c_rgKeywords);
}
